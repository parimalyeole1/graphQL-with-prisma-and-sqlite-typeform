generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// start:For this test only working with Album and Artist table >>>>>
model Albums {
  albumId  Int      @id @default(autoincrement())
  title    String
  artistId Int
  artists  Artists  @relation(fields: [artistId], references: [artistId], onDelete: NoAction, onUpdate: NoAction)
  tracks   tracks[]

  @@index([artistId], map: "IFK_AlbumArtistId")
}

model Artists {
  artistId Int      @id @default(autoincrement())
  name     String
  albums   Albums[]
}
// <<<< end:For this test only working with Album and Artist table

model Customers {
  customerId   Int        @id @default(autoincrement())
  firstName    String
  lastName     String
  company      String?
  address      String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  phone        String?
  fax          String?
  email        String
  supportRepId Int?
  employees    Employees? @relation(fields: [supportRepId], references: [employeeId], onDelete: NoAction, onUpdate: NoAction)
  invoices     Invoices[]

  @@index([supportRepId], map: "IFK_CustomerSupportRepId")
}

model Employees {
  employeeId      Int         @id @default(autoincrement())
  lastName        String
  firstName       String
  title           String?
  reportsTo       Int?
  birthDate       DateTime?
  hireDate        DateTime?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  phone           String?
  fax             String?
  email           String?
  employees       Employees?  @relation("employeesToemployees_ReportsTo", fields: [reportsTo], references: [employeeId], onDelete: NoAction, onUpdate: NoAction)
  customers       Customers[]
  other_employees Employees[] @relation("employeesToemployees_ReportsTo")

  @@index([reportsTo], map: "IFK_EmployeeReportsTo")
}

model genres {
  genreId Int      @id @default(autoincrement())
  name    String?
  tracks  tracks[]
}

model InvoiceItems {
  invoiceLineId Int      @id @default(autoincrement())
  invoiceId     Int
  trackId       Int
  unitPrice     Decimal
  quantity      Int
  invoices      Invoices @relation(fields: [invoiceId], references: [invoiceId], onDelete: NoAction, onUpdate: NoAction)
  tracks        tracks   @relation(fields: [trackId], references: [trackId], onDelete: NoAction, onUpdate: NoAction)

  @@index([trackId], map: "IFK_InvoiceLineTrackId")
  @@index([invoiceId], map: "IFK_InvoiceLineInvoiceId")
}

model Invoices {
  invoiceId         Int             @id @default(autoincrement())
  customerId        Int
  invoiceDate       DateTime
  billingAddress    String?
  billingCity       String?
  billingState      String?
  billingCountry    String?
  billingPostalCode String?
  total             Decimal
  customers         Customers       @relation(fields: [customerId], references: [customerId], onDelete: NoAction, onUpdate: NoAction)
  invoice_items     InvoiceItems[]

  @@index([customerId], map: "IFK_InvoiceCustomerId")
}

model MediaTypes {
  mediaTypeId Int      @id @default(autoincrement())
  name        String?
  tracks      tracks[]
}

model PlaylistTrack {
  playlistId Int
  trackId    Int
  playlists  Playlists @relation(fields: [playlistId], references: [playlistId], onDelete: NoAction, onUpdate: NoAction)
  tracks     tracks    @relation(fields: [trackId], references: [trackId], onDelete: NoAction, onUpdate: NoAction)

  @@id([playlistId, trackId])
  @@index([trackId], map: "IFK_PlaylistTrackTrackId")
}

model Playlists {
  playlistId     Int              @id @default(autoincrement())
  name           String?
  playlist_track PlaylistTrack[]
}

model tracks {
  trackId        Int              @id @default(autoincrement())
  name           String
  albumId        Int?
  mediaTypeId    Int
  genreId        Int?
  composer       String?
  milliseconds   Int
  bytes          Int?
  unitPrice      Decimal
  albums         Albums?          @relation(fields: [albumId], references: [albumId], onDelete: NoAction, onUpdate: NoAction)
  genres         genres?          @relation(fields: [genreId], references: [genreId], onDelete: NoAction, onUpdate: NoAction)
  media_types    MediaTypes      @relation(fields: [mediaTypeId], references: [mediaTypeId], onDelete: NoAction, onUpdate: NoAction)
  invoice_items  InvoiceItems[]
  playlist_track PlaylistTrack[]

  @@index([mediaTypeId], map: "IFK_TrackMediaTypeId")
  @@index([genreId], map: "IFK_TrackGenreId")
  @@index([albumId], map: "IFK_TrackAlbumId")
}
